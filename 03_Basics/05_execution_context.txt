// Javascript Execution Context
{} => Global EC => this

-> Global Execution Context
-> Functional Execution Context
-> Eval Execution Context

Runs in 2 phases:
-> Memory Creation Phase (Only allocate memory)
-> Execution Phase

steps:
1. Global Exection -> this 
2. Memory Phase 
    val1 -> undefined
    val2 -> undefined
    addNum -> defination
    result1 -> undefined
    result2 -> undefined
3. Execution Phase
    val1 <- 10
    val2 <- 5
    addNum -> another Exection Context(new variable environment + execution thread)
    Memory Phase:
        val1 -> undefined
        val2 -> undefined
        total -> undefined
    Exection Context:
        num1 -> 10
        num2 -> 5
        total -> 15 (return to global Execution Context)

    after completed exection context will be deleted

// Call Stack (LIFO)
function one() {
    console.log("one");
    two();
}
function two() {
    console.log("two");
    three();
}
function three() {
    console.log("three");
}

one()
two()
three()